#!/bin/bash

# The location for downloads
DOWN_DIR="/opt/DOWN"
#DOWN_DIR="/home/mark/test/DOWN"

# The location of the openHAB installation
OH2_DIR="/opt/openhab"
#OH2_DIR="/home/mark/test/openhab"

KARAF_DIR=${OH2_DIR}/runtime/karaf

# The location of SmartHome Designer
SMD_DIR="/opt/ohdesign"
#SMD_DIR="/home/mark/test/ohdesign"

# Name of OH2 snapshot file
OH2_FILE="openhab-online-2.0.0-SNAPSHOT.zip"
# Update this variable if the name of the Habmin2 jar changes
HM2_FILE="org.openhab.ui.habmin_0.1.7-SNAPSHOT.jar"
# Update this if the name of the designer snapshot changes
SMD_FILE="eclipsesmarthome-incubation-0.9.0-SNAPSHOT-designer-linux64.zip"

# URL to OH2 online nightlies
OH2_URL="https://openhab.ci.cloudbees.com/job/openHAB-Distribution/lastSuccessfulBuild/artifact/distributions/openhab-online/target"
# URL to HABmin website
HM2_URL="https://github.com/cdjackson/HABmin2/raw/master/output"
# URL to designer snapshot directory
SMD_URL="http://download.eclipse.org/smarthome/nightly-snapshots"

if [ $EUID != 0 ]; then
	echo "Please run this as root!"
	exit 1
fi

ACTIVESTATE=`systemctl --lines=0 show openHAB | fgrep ActiveState`
if [ ${ACTIVESTATE#*=} = "active" ] ; then
	echo "openHAB is running.  Please stop it before running the update."
	exit 1
fi


# read the options
TEMP=`getopt --options h --longoptions help,skip-designer,skip-habmin -n $0 -- "$@"`
eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
	-h | --help)
		echo "Usage: $0 [--skip-designer] [--skip-habmin]"
		exit 0 
		;;
	--skip-designer)
		dflag=1
		shift
		;;
	--skip-habmin)
		hflag=1
		shift
		;;
	*)
		break 
		;;
    esac
done

cd ${DOWN_DIR}

# Download openHAB2
if [[ `wget -S --spider ${OH2_URL}/${OH2_FILE}  2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then 
	echo "openHAB file exists on remote server.  Fetching it";
	wget -N -q --show-progress ${OH2_URL}/${OH2_FILE}
else
	echo "Error: openHAB file does not exist on remote server!!!"
	echo "openHAB URL is:" ${OH2_URL}/${OH2_FILE}
	echo "Exiting now"
	exit 1
fi

if [ -z ${hflag} ]; then
	# Download HABmin2
	if [[ `wget -S --spider ${HM2_URL}/${HM2_FILE}  2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
		echo "HABmin file exists on remote server.  Fetching it";
		wget -N -q --show-progress --content-disposition --no-check-certificate ${HM2_URL}/${HM2_FILE}
	else
		echo "HABmin file does not exist on remote server!!! Check the website for a new rev."
		echo "Remote directory is:" ${HM2_URL}/${HM2_FILE}
	fi
fi

if [ -z ${dflag} ]; then
	# Download SmartHome Designer
	if [[ `wget -S --spider ${SMD_URL}/${SMD_FILE}  2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then 
		echo "Smarthome Designer file exists on remote server.  Fetching it";
		wget -N -q --show-progress ${SMD_URL}/${SMD_FILE}
	else
		echo "Smarthome Designer file does not exist on remote server!!!  Check the website for a new rev."
		echo "Remote directory is:" ${SMD_URL}/${SMD_FILE}
	fi
fi

cd ${OH2_DIR}
rm -rf ${OH2_DIR}/runtime
rm -rf ${OH2_DIR}/userdata/cache/*
rm -rf ${OH2_DIR}/userdata/tmp/*

echo "Unzipping openHAB"
unzip -n -q ${DOWN_DIR}/${OH2_FILE}

# clear up some windows clutter not needed with *nix systems
rm -f ${OH2_DIR}/*.bat

# Replace the karaf config file with mine
echo "Replace karaf config file with mine"
cp ${OH2_DIR}/runtime/karaf/etc/org.apache.karaf.shell.cfg ${OH2_DIR}/runtime/karaf/etc/org.apache.karaf.shell.cfg.orig
cp ${DOWN_DIR}/org.apache.karaf.shell.cfg ${OH2_DIR}/runtime/karaf/etc/org.apache.karaf.shell.cfg

# We want zwave debugging on by default
echo "Enabling debug mode for zwave binding"
echo "" >> ${OH2_DIR}/runtime/karaf/etc/org.ops4j.pax.logging.cfg
echo "# We want zwave debugging on by default" >> ${OH2_DIR}/runtime/karaf/etc/org.ops4j.pax.logging.cfg
echo "log4j.logger.org.openhab.binding.zwave = DEBUG" >> ${OH2_DIR}/runtime/karaf/etc/org.ops4j.pax.logging.cfg
echo "# We don't want to hear every time there's a weather update" >> ${OH2_DIR}/runtime/karaf/etc/org.ops4j.pax.logging.cfg
echo "log4j.logger.org.openhab.binding.weather = WARN" >> ${OH2_DIR}/runtime/karaf/etc/org.ops4j.pax.logging.cfg

if [ -z ${hflag} ]; then
	echo "Copying HABmin to addons directory"
	# First remove any old versions in addons directory
	rm -f ${OH2_DIR}/addons/org.openhab.ui.habmin*.jar
	if [ -e ${DOWN_DIR}/${HM2_FILE} ]; then
		cp ${DOWN_DIR}/${HM2_FILE} ${OH2_DIR}/addons
	fi
fi

if [ -z ${dflag} ]; then
	echo "Unzipping designer"
	cd ${SMD_DIR}
	rm -rf ${SMD_DIR}/p2/* ${SMD_DIR}/plugins 
	unzip -q -o ${DOWN_DIR}/${SMD_FILE}
fi

if [ -d "${OH2_DIR}/userdata/logs" ]; then
	# Start with empty log files
	echo "Zapping the log files"
	rm -f ${OH2_DIR}/userdata/logs/openhab.log.[0-9]
	cp /dev/null ${OH2_DIR}/userdata/logs/openhab.log
	cp /dev/null ${OH2_DIR}/userdata/logs/events.log
	cp /dev/null ${OH2_DIR}/userdata/logs/wrapper.log
fi

SERVICE_DIR=${DOWN_DIR}/service

if [ ! -d ${SERVICE_DIR} ]; then
	echo "The directory and files are not there: " ${SERVICE_DIR}
	exit 1
fi

echo "Enabling openHAB as a service..."

if [ ! -d ${KARAF_DIR}/lib/wrapper ]; then
	mkdir --parents ${KARAF_DIR}/lib/wrapper
fi

cp -n ${SERVICE_DIR}/openHAB-wrapper ${KARAF_DIR}/bin/
cp -n ${SERVICE_DIR}/openHAB-service ${KARAF_DIR}/bin/
cp -n ${SERVICE_DIR}/openHAB.service ${KARAF_DIR}/bin/
cp -n ${SERVICE_DIR}/openHAB-wrapper.conf ${KARAF_DIR}/etc/
cp -n ${SERVICE_DIR}/libwrapper.so ${KARAF_DIR}/lib/wrapper/
cp -n ${SERVICE_DIR}/karaf-wrapper.jar ${KARAF_DIR}/lib/wrapper/
cp -n ${SERVICE_DIR}/karaf-wrapper-main.jar ${KARAF_DIR}/lib/wrapper/

systemctl enable /opt/openhab/runtime/karaf/bin/openHAB.service

